<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.batch.repository.BatchRepository">

    <sql id="batchExecutionColumns">
        id,
        job_id,
        job_name,
        status,
        exit_code,
        user_id,
        start_time,
        end_time,
        created_at
    </sql>

    <!-- BatchExecution resultMap with ExecutionStatus enum type handler -->
    <resultMap id="batchExecutionResultMap" type="com.example.demo.batch.entity.BatchExecution">
        <id column="id" property="id" />
        <result column="job_id" property="jobId" />
        <result column="job_name" property="jobName" />
        <result column="status" property="status" typeHandler="org.apache.ibatis.type.EnumTypeHandler" />
        <result column="exit_code" property="exitCode" />
        <result column="user_id" property="userId" />
        <result column="start_time" property="startTime" />
        <result column="end_time" property="endTime" />
        <result column="created_at" property="createdAt" />
    </resultMap>

    <insert id="insert" parameterType="com.example.demo.batch.entity.BatchExecution">
        INSERT INTO batch_execution_history (
            id,
            job_id,
            job_name,
            status,
            exit_code,
            user_id,
            start_time,
            end_time,
            created_at
        ) VALUES (
            #{id},
            #{jobId},
            #{jobName},
            #{status},
            #{exitCode},
            #{userId},
            #{startTime},
            #{endTime},
            #{createdAt}
        )
    </insert>

    <select id="findById" parameterType="String" resultMap="batchExecutionResultMap">
        SELECT
            <include refid="batchExecutionColumns"/>
        FROM batch_execution_history
        WHERE id = #{id}
        LIMIT 1
    </select>

    <update id="update" parameterType="com.example.demo.batch.entity.BatchExecution">
        UPDATE batch_execution_history
        SET
            status = #{status},
            exit_code = #{exitCode},
            end_time = #{endTime}
        WHERE id = #{id}
    </update>

    <select id="countByUserId" parameterType="Long" resultType="long">
        SELECT COUNT(*)
        FROM batch_execution_history
        WHERE user_id = #{userId}
    </select>

    <!-- BatchSearchParams を使用した検索（パラメータオブジェクト版） -->
    <select id="searchBatchExecution" parameterType="com.example.demo.batch.service.BatchSearchCriteria" resultMap="batchExecutionResultMap">
        SELECT
            <include refid="batchExecutionColumns"/>
        FROM batch_execution_history
        <where>
            <if test="userId != null">
                user_id = #{userId}
            </if>
            <if test="jobName != null and jobName != ''">
                AND job_name LIKE CONCAT('%', #{jobName}, '%')
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="startDateFrom != null">
                <![CDATA[
                AND start_time >= #{startDateFrom}
                ]]>
            </if>
            <if test="endDateTo != null">
                <![CDATA[
                AND end_time <= #{endDateTo}
                ]]>
            </if>
        </where>
        ORDER BY end_time DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- BatchSearchParams を使用した件数取得（パラメータオブジェクト版） -->
    <select id="countBatchExecution" parameterType="com.example.demo.batch.service.BatchSearchCriteria" resultType="long">
        SELECT COUNT(*)
        FROM batch_execution_history
        <where>
            <if test="userId != null">
                user_id = #{userId}
            </if>
            <if test="jobName != null and jobName != ''">
                AND job_name LIKE CONCAT('%', #{jobName}, '%')
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="startDateFrom != null">
                <![CDATA[
                AND start_time >= #{startDateFrom}
                ]]>
            </if>
            <if test="endDateTo != null">
                <![CDATA[
                AND end_time <= #{endDateTo}
                ]]>
            </if>
        </where>
    </select>

</mapper>
