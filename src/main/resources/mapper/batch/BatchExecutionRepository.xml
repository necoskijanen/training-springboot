<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.domain.batch.repository.BatchExecutionRepository">

    <insert id="insert" parameterType="com.example.demo.domain.batch.BatchExecution">
        INSERT INTO batch_execution_history (
            id,
            job_id,
            job_name,
            status,
            exit_code,
            user_id,
            start_time,
            end_time,
            created_at
        ) VALUES (
            #{id},
            #{jobId},
            #{jobName},
            #{status},
            #{exitCode},
            #{userId},
            #{startTime},
            #{endTime},
            #{createdAt}
        )
    </insert>

    <select id="findById" parameterType="String" resultType="com.example.demo.domain.batch.BatchExecution">
        SELECT
            id,
            job_id as jobId,
            job_name as jobName,
            status,
            exit_code as exitCode,
            user_id as userId,
            start_time as startTime,
            end_time as endTime,
            created_at as createdAt
        FROM batch_execution_history
        WHERE id = #{id}
    </select>

    <update id="update" parameterType="com.example.demo.domain.batch.BatchExecution">
        UPDATE batch_execution_history
        SET
            status = #{status},
            exit_code = #{exitCode},
            end_time = #{endTime}
        WHERE id = #{id}
    </update>

    <select id="findByUserIdWithPaging" resultType="com.example.demo.domain.batch.BatchExecution">
        SELECT
            id,
            job_id as jobId,
            job_name as jobName,
            status,
            exit_code as exitCode,
            user_id as userId,
            start_time as startTime,
            end_time as endTime,
            created_at as createdAt
        FROM batch_execution_history
        WHERE user_id = #{userId}
        ORDER BY start_time DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countByUserId" parameterType="Long" resultType="long">
        SELECT COUNT(*)
        FROM batch_execution_history
        WHERE user_id = #{userId}
    </select>

    <select id="searchBatchExecution" resultType="com.example.demo.domain.batch.BatchExecution">
        SELECT
            id,
            job_id as jobId,
            job_name as jobName,
            status,
            exit_code as exitCode,
            user_id as userId,
            start_time as startTime,
            end_time as endTime,
            created_at as createdAt
        FROM batch_execution_history
        <where>
            <if test="userId != null">
                user_id = #{userId}
            </if>
            <if test="jobName != null and jobName != ''">
                AND job_name LIKE CONCAT('%', #{jobName}, '%')
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="startDateFrom != null">
                <![CDATA[
                AND DATE(start_time) >= #{startDateFrom}
                ]]>
            </if>
            <if test="startDateTo != null">
                <![CDATA[
                AND DATE(start_time) <= #{startDateTo}
                ]]>
            </if>
            <if test="endDateFrom != null">
                <![CDATA[
                AND DATE(end_time) >= #{endDateFrom}
                ]]>
            </if>
            <if test="endDateTo != null">
                <![CDATA[
                AND DATE(end_time) <= #{endDateTo}
                ]]>
            </if>
        </where>
        ORDER BY end_time DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countBatchExecution" resultType="long">
        SELECT COUNT(*)
        FROM batch_execution_history
        <where>
            <if test="userId != null">
                user_id = #{userId}
            </if>
            <if test="jobName != null and jobName != ''">
                AND job_name LIKE CONCAT('%', #{jobName}, '%')
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="startDateFrom != null">
                <![CDATA[
                AND DATE(start_time) >= #{startDateFrom}
                ]]>
            </if>
            <if test="startDateTo != null">
                <![CDATA[
                AND DATE(start_time) <= #{startDateTo}
                ]]>
            </if>
            <if test="endDateFrom != null">
                <![CDATA[
                AND DATE(end_time) >= #{endDateFrom}
                ]]>
            </if>
            <if test="endDateTo != null">
                <![CDATA[
                AND DATE(end_time) <= #{endDateTo}
                ]]>
            </if>
        </where>
    </select>

</mapper>
